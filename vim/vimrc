"------------------------------------------------------------------------------
" Initialize:
"
" Note: Skip initialization for vim-tiny or vim-small.
if 0 | endif

function! s:source_rc(path)
    execute 'source' fnameescape(expand('~/.config/vim/rc/' . a:path))
endfunction

let s:is_windows = has('win16') || has('win32') || has('win64')
let s:is_cygwin = has('win32unix')
let s:is_sudo = $SUDO_USER !=# '' && $USER !=# $SUDO_USER
      \ && $HOME !=# expand('~'.$USER)
      \ && $HOME ==# expand('~'.$SUDO_USER)

function! IsWindows()
    return s:is_windows
endfunction

function! IsMac()
    return !s:is_windows && !s:is_cygwin
    \ && (has('mac') || has('macunix') || has('gui_macvim') ||
    \   (!executable('xdg-open') &&
    \     system('uname') =~? '^darwin'))
endfunction

function! s:get_SID()
  return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeget_SID$')
endfunction
let s:SID = s:get_SID()
delfunction s:get_SID

augroup previousline
  autocmd!
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END

" toggles the quickfix window.
" http://vim.wikia.com/wiki/Toggle_to_open_or_close_the_quickfix_window
command -bang -nargs=? QFix call QFixToggle(<bang>0)
function! QFixToggle(forced)
  if exists("g:qfix_win") && a:forced == 0
    cclose
    unlet g:qfix_win
  else
    botright copen 10
    let g:qfix_win = bufnr("$")
  endif
endfunction

autocmd QuickfixCmdPost vimgrep,grep botright copen
autocmd QuickfixCmdPost make call s:open_quickfix_window()
function! s:open_quickfix_window()
  silent redraw!
  if (len(getqflist()) == 1)
    cclose
  else
    botright copen 10
    let g:qfix_win = bufnr("$")
  endif
endfunction
" auto close
" http://qiita.com/hidetzu/items/97b11c06e3e3a6c6d699
function s:QuickFix_Exit_OnlyWindow()
  if winnr('$') == 1
    if (getbufvar(winbufnr(0), '&buftype')) == 'quickfix'
      quit
    endif
  endif
endfunction
autocmd WinEnter * call s:QuickFix_Exit_OnlyWindow()

augroup MyVimrc
  autocmd!
augroup END
command! -nargs=* Autocmd   autocmd MyVimrc <args>
command! -nargs=* AutocmdFT autocmd MyVimrc FileType <args>


" Initialize
call s:source_rc('init.vim')

call neobundle#begin(expand('$CACHE/neobundle'))
if neobundle#load_cache()
    NeoBundleFetch 'Shougo/neobundle.vim'

    call neobundle#load_toml('~/.config/vim/neobundle.toml')
    call neobundle#load_toml('~/.config/vim/neobundlelazy.toml')

    NeoBundleSaveCache
endif


"------------------------------------------------------------------------------
" NeoBundle configurations.
"
call s:source_rc('plugins.vim')
call s:source_rc('plugins-tools.vim')
call s:source_rc('plugins-syntax.vim')
call s:source_rc('plugins-git.vim')

call neobundle#end()
filetype plugin indent on

" Enable syntax color.
syntax enable

if !has('vim_starting')
    " Installation check.
    NeoBundleCheck
endif


"------------------------------------------------------------------------------
" Encoding
"
call s:source_rc('encoding.vim')


"------------------------------------------------------------------------------
" Edit
"
call s:source_rc('edit.vim')


"------------------------------------------------------------------------------
" View
"
call s:source_rc('view.vim')


"------------------------------------------------------------------------------
" Mappings
"
call s:source_rc('mappings.vim')


function! s:cpp_marker()
    set foldmethod=marker
    set foldmarker=R\"\(,\)\"\;
endfunction

augroup FoldMethod
    autocmd!
    autocmd FileType cpp call s:cpp_marker()
augroup END

"------------------------------------------------------------------------------
if filereadable(expand('~/.config/vim/vimrc.local'))
    source ~/.config/vim/vimrc.local
endif

" find vimrc from current repository
augroup vimrc-local
    autocmd!
    autocmd BufNewFile,BufReadPost * call s:vimrc_local(expand('<afile>:p:h'))
augroup END

function! s:vimrc_local(loc)
    let files = findfile('.vimrc.proj', escape(a:loc, ' ') . ';', -1)
    for i in reverse(filter(files, 'filereadable(v:val)'))
        source `=i`
    endfor
endfunction
