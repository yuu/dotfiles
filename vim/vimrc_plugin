" ------------------------------------------------------------------------------
" UTILITY
" ------------------------------------------------------------------------------
" 'rhysd/accelerated-jk' {{{
" ------------------------------------------------------------------------------
" jkを加速する
" conservative deceleration
" let g:accelerated_jk_enable_deceleration = 1
" nmap j <Plug>(accelerated_jk_gj)
" nmap k <Plug>(accelerated_jk_gk)
" }}}
" ------------------------------------------------------------------------------
" 'cohama/lexima.vim' {{{
" ------------------------------------------------------------------------------
" }}}
" ------------------------------------------------------------------------------
" 'jiangmiao/auto-pairs' {{{
" ------------------------------------------------------------------------------
let g:AutoPairsShortcutToggle = '' " disable
let g:AutoPairsShortcutJump = '' " disable
let g:AutoPairsShortcutBackInsert = '' " disable
let g:AutoPairsShortcutFastWrap = '<C-e>'
" }}}

vmap <C-v> <Plug>(expand_region_expand)
vmap v     <Plug>(expand_region_shrink)

" ------------------------------------------------------------------------------
" OPERATOR
" ------------------------------------------------------------------------------
" 'kana/vim-operator-user' {{{
" ------------------------------------------------------------------------------
" }}}
" ------------------------------------------------------------------------------
" 'kana/vim-operator-replace' {{{
" ------------------------------------------------------------------------------
" }}}
" ------------------------------------------------------------------------------
" COMPLETE
" ------------------------------------------------------------------------------
" 'Shougo/neocomplete.vim' {{{
" ------------------------------------------------------------------------------
if has('lua') && (v:version > 703 || (v:version == 703 && has('patch885')))
    " --------------------------------------------------------------------------
    " neocomplete の設定
    " --------------------------------------------------------------------------
    "Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
    " Disable AutoComplPop.
    let g:acp_enableAtStartup = 0
    " Use neocomplete.
    let g:neocomplete#enable_at_startup = 1
    " Use smartcase.
    let g:neocomplete#enable_smart_case = 1
    " Set minimum syntax keyword length.
    let g:neocomplete#sources#syntax#min_keyword_length = 3
    let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
    " popup menu の最大数を設定
    let g:neocomplete#max_list = 10
    " 補完の最大長設定(path補完のために増やす)
    let g:neocomplete#max_keyword_width = 140

    " Define dictionary.
    let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'vimshell' : $HOME.'/.vimshell_hist',
        \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

    " Define keyword.
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " Plugin key-mappings.
    inoremap <expr><C-g>     neocomplete#undo_completion()
    inoremap <expr><C-l>     neocomplete#complete_common_string()

    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
      " For no inserting <CR> key.
      return pumvisible() ? neocomplete#close_popup() : "\<CR>"
    endfunction
    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><C-y>  neocomplete#close_popup()
    inoremap <expr><C-e>  neocomplete#cancel_popup()

    " Mapping Cursor Key
    inoremap <expr><Up>    pumvisible() ? "\<C-p>" : "\<Up>"
    inoremap <expr><Down>  pumvisible() ? "\<C-n>" : "\<Down>"

    " Enable omni completion.
    AutocmdFT css setlocal omnifunc=csscomplete#CompleteCSS
    AutocmdFT html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    AutocmdFT javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    AutocmdFT xml setlocal omnifunc=xmlcomplete#CompleteTags

    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
      let g:neocomplete#sources#omni#input_patterns = {}
    endif
    let g:neocomplete#sources#omni#input_patterns.php =
          \ '[^. \t]->\h\w*\|\h\w*::'
    let g:neocomplete#sources#omni#input_patterns.c =
          \ '[^.[:digit:] *\t]\%(\.\|->\)'
    let g:neocomplete#sources#omni#input_patterns.cpp =
          \ '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
    let g:neocomplete#sources#omni#input_patterns.go = '\h\w\.\w*'

    " For perlomni.vim setting.
    " https://github.com/c9s/perlomni.vim
    let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

    " For clang_complete
    if !exists('g:neocomplete#force_omni_input_patterns')
      let g:neocomplete#force_omni_input_patterns = {}
    endif

    let g:neocomplete#force_overwrite_completefunc = 1

    let g:neocomplete#force_omni_input_patterns.c =
          \ '[^.[:digit:] *\t]\%(\.\|->\)\w*'
    let g:neocomplete#force_omni_input_patterns.cpp =
          \ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
    let g:neocomplete#force_omni_input_patterns.objc =
          \ '[^.[:digit:] *\t]\%(\.\|->\)\w*'
    let g:neocomplete#force_omni_input_patterns.objcpp =
          \ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
    let g:neocomplete#force_omni_input_patterns.python =
          \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
    let g:neocomplete#force_omni_input_patterns.typescript = '\h\w\.\w*'

    autocmd FileType python setlocal omnifunc=jedi#completions
    let g:jedi#completions_enabled = 0
    let g:jedi#auto_vim_configuration = 0
    let g:jedi#rename_command = ",r"
    let g:jedi#popup_on_dot = 0
endif
" }}}
" ------------------------------------------------------------------------------
" 'Shougo/neosnippet' {{{
" ------------------------------------------------------------------------------
" Plugin key-mappings.
imap <expr><Tab> neosnippet#expandable_or_jumpable() ?
            \ "\<Plug>(neosnippet_expand_or_jump)"
            \: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
            \ "\<Plug>(neosnippet_expand_or_jump)"
            \: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif
" }}}
" ------------------------------------------------------------------------------
" UNITE & UNITE SOURCES
" ------------------------------------------------------------------------------
" 'Shougo/unite.vim' {{{
" ------------------------------------------------------------------------------
let g:unite_source_history_yank_enable =1
let g:unite_source_file_mru_limit = 50
let g:unite_split_rule = 'botright'
nnoremap <silent> <Space>y :<C-u>Unite history/yank<CR>
nnoremap <silent> <Space>b :<C-u>Unite buffer:-<CR>
nnoremap <silent> <Space>t :<C-u>Unite tab<CR>
nnoremap <silent> <Space>f :<C-u>Unite -start-insert file_rec/async:!<CR>
nnoremap <silent> <Space>g :<C-u>Unite -start-insert file_rec/git<CR>
nnoremap <silent> <Space>r :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent> <Space>i :<C-u>Unite file_include<CR>
nnoremap <silent> <Space>l :<C-u>Unite -start-insert line<CR>
" }}}
" ------------------------------------------------------------------------------
" 'Shougo/neomru' {{{
" ------------------------------------------------------------------------------
nnoremap <silent> <Space>u :<C-u>Unite -start-insert file_mru buffer:-<CR>
" }}}
" ------------------------------------------------------------------------------
" 'Shougo/unite-outline' {{{
" ------------------------------------------------------------------------------
nnoremap <silent> <Space>o :<C-u>Unite -wrap -vertical -no-quit -keep-focus outline<CR>
" }}}
" ------------------------------------------------------------------------------
" 'sgoranson/unite-mark' {{{
" ------------------------------------------------------------------------------
nnoremap <silent> <Space>m :<C-u>Unite mark<CR>
" }}}
" ------------------------------------------------------------------------------
" 'tsukkee/unite-tag' {{{
" ------------------------------------------------------------------------------
let g:unite_source_tag_max_name_length = 60
let g:unite_source_tag_max_fname_length = 40
Autocmd BufEnter *
    \ if empty(&buftype)
    \| nnoremap <buffer> <C-]> :<C-u>UniteWithCursorWord -immediately tag tag/include<CR>
    \| endif
" }}}
" ------------------------------------------------------------------------------
" 'Shougo/vimfiler' {{{
" ------------------------------------------------------------------------------
" }}}
" ------------------------------------------------------------------------------
" 'Shougo/vimshell.vim' {{{
" ------------------------------------------------------------------------------
" }}}
" ------------------------------------------------------------------------------
" TREE VIEW / EXPROLER
" ------------------------------------------------------------------------------
" 'scrooloose/nerdtree' {{{
" ------------------------------------------------------------------------------
augroup my_nerdtree_settings
    autocmd!
    " key mappings
    nmap <silent> <Space>F :<C-u>NERDTreeToggle<CR>
    " auto close when last buffer is NERDTree
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&
            \ b:NERDTreeType == "primary") | q | endif
augroup END
" }}}
" ------------------------------------------------------------------------------
" BUFFER
" ------------------------------------------------------------------------------
" 'mopp/next-alter.vim' {{{
" ------------------------------------------------------------------------------
let g:next_alter#do_not_create_not_exist_pair_extension = 2
" key is file extension, value is alternate file extension.
let g:next_alter#pair_extension = {
            \ 'c'   : [ 'h' ],
            \ 'C'   : [ 'H' ],
            \ 'cc'  : [ 'h' ],
            \ 'CC'  : [ 'H', 'h'],
            \ 'cpp' : [ 'h', 'hpp' ],
            \ 'CPP' : [ 'H', 'HPP' ],
            \ 'cxx' : [ 'h', 'hpp' ],
            \ 'CXX' : [ 'H', 'HPP' ],
            \ 'h'   : [ 'c', 'cpp', 'cxx' ],
            \ 'H'   : [ 'C', 'CPP', 'CXX' ],
            \ 'hpp' : [ 'cpp', 'cxx'],
            \ 'HPP' : [ 'CPP', 'CXX'],
            \ }

" this list shows search directory to find alternate file.
let g:next_alter#search_dir = [ '.' , '..', './include', '../include' ]

" this is used when it opens alternate file buffer.
let g:next_alter#open_option = 'vertical topleft'

" key mapping
nnoremap <silent> <Space>a :<C-u>OpenNAlter<CR>
" }}}
" ------------------------------------------------------------------------------
" MOTION
" ------------------------------------------------------------------------------
" 'rhysd/clever-f.vim' {{{
" ------------------------------------------------------------------------------
let g:clever_f_across_no_line=1
" }}}
" ------------------------------------------------------------------------------
" 'Lokaltog/vim-easymotion' {{{
" ------------------------------------------------------------------------------
" Disable default mappings
let g:EasyMotion_do_mapping = 0
nmap s <Plug>(easymotion-s2)
" Turn on case sensitive feature
let g:EasyMotion_smartcase = 1
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
" }}}
" ------------------------------------------------------------------------------
" COMMENT OUT
" ------------------------------------------------------------------------------
" 'tyru/caw.vim' {{{
" ------------------------------------------------------------------------------
" デフォルトマッピングを OFF
let g:caw_no_default_keymappings = 1
" キーマッピング
nmap <silent> ,/ <Plug>(caw:i:toggle)
vmap <silent> ,/ <Plug>(caw:i:toggle)
" }}}
" ------------------------------------------------------------------------------
" GIT
" ------------------------------------------------------------------------------
" 'airblade/vim-gitgutter' {{{
" ------------------------------------------------------------------------------
let g:rooter_disable_map = 1
let g:rooter_change_directory_for_non_project_files = 1
" }}}
" ------------------------------------------------------------------------------
" 'tpope/vim-fugitive' {{{
" ------------------------------------------------------------------------------
" }}}
" ------------------------------------------------------------------------------
" 'airblade/vim-gitgutter' {{{
" ------------------------------------------------------------------------------
let g:gitgutter_sign_column_always = 1
let g:gitgutter_sign_added = '✚'
let g:gitgutter_sign_modified = '➜'
let g:gitgutter_sign_removed = '_'
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 1
let g:gitgutter_max_signs = 2000
let g:gitgutter_escape_grep = 1
" }}}
" ------------------------------------------------------------------------------
" 'kmnk/vim-unite-giti' {{{
" ------------------------------------------------------------------------------
" }}}
" ------------------------------------------------------------------------------
" 'rhysd/committia.vim' {{{
" ------------------------------------------------------------------------------
" You can get the information about the windows with first argument as a dictionary.
"
"   KEY              VALUE                      AVAILABILITY
"-----------------------------------------------------------------------------------
"   vcs            : vcs type (e.g. 'git')   -> all hooks
"   edit_winnr     : winnr of edit window    -> ditto
"   edit_bufnr     : bufnr of edit window    -> ditto
"   diff_winnr     : winnr of diff window    -> ditto
"   diff_bufnr     : bufnr of diff window    -> ditto
"   status_winnr   : winnr of status window  -> all hooks except for 'diff_open' hook
"   status_bufnr   : bufnr of status window  -> ditto

let g:committia_hooks = {}
function! g:committia_hooks.edit_open(info)
    " Additional settings
    setlocal spell

    " If no commit message, start with insert mode
    if a:info.vcs ==# 'git' && getline(1) ==# ''
        startinsert
    end

    " Scroll the diff window from insert mode
    " Map <C-n> and <C-p>
    imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
    imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)

endfunction
" }}}
" ------------------------------------------------------------------------------
" 'cohama/agit.vim' {{{
" ------------------------------------------------------------------------------
" }}}
" ------------------------------------------------------------------------------
" QUICKFIX
" ------------------------------------------------------------------------------
" 'dannyob/quickfixstatus' {{{
" }}}
" ------------------------------------------------------------------------------
" 'cohama/vim-hier' {{{
" ------------------------------------------------------------------------------
" let g:hier_enabled = 1
let g:hier_enabled = 0
" }}}
" ------------------------------------------------------------------------------
" SEARCH
" ------------------------------------------------------------------------------
" 'thinca/vim-visualstar' {{{
" }}}
" ------------------------------------------------------------------------------
" 'haya14busa/incsearch.vim' {{{
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
" }}}
" ------------------------------------------------------------------------------
" SYNTAX CHECK
" ------------------------------------------------------------------------------
" 'scrooloose/syntastic' {{{
" ------------------------------------------------------------------------------
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

" なぜかQuickfix listのエラーがでるので必ず0にする
let g:syntastic_auto_loc_list = 0

let g:syntastic_enable_signs   = 1
let g:syntastic_error_symbol   = '✗'
let g:syntastic_warning_symbol = '⚠'

let g:syntastic_echo_current_error  = 1
let g:syntastic_enable_highlighting = 0

let g:syntastic_c_config_file   = '~/.clang_complete'
let g:syntastic_cpp_config_file = '~/.clang_complete'
let g:syntastic_cpp_compiler_options = '-std=c++1y -Wall -Weffc++'
let g:syntastic_c_compiler = 'clang++'

" cpplint
let g:syntastic_cpp_cpplint_thres = 5
let g:syntastic_cpp_cpplint_args = '--verbose=3'

nnoremap <silent> <Space>s :<C-u>SyntasticCheck cpplint<CR>
" }}}
" ------------------------------------------------------------------------------
" == TRIAL == 'osyo-manga/vim-watchdogs' {{{
" ------------------------------------------------------------------------------
" NeoBundle 'thinca/vim-quickrun'
" let g:quickrun_config = {
" \    'watchdogs_checker/_' : {
" \        'hook/qfsigns_update/enable_exit':   1,
" \        'hook/qfsigns_update/priority_exit': 3,},}
" NeoBundle 'osyo-manga/shabadou.vim'
" NeoBundle 'osyo-manga/vim-watchdogs'
" NeoBundle 'KazuakiM/vim-qfsigns'
"
" " If syntax error, cursor is moved at line setting sign.
" let g:qfsigns#AutoJump = 1
" " If syntax error, view split and cursor is moved at line setting sign.
" let g:qfsigns#AutoJump = 2
" }}}
" ------------------------------------------------------------------------------
" STATUS LINE
" ------------------------------------------------------------------------------
" 'itchyny/lightline.vim' {{{
" ------------------------------------------------------------------------------
let g:lightline = {
  \ 'colorscheme': 'wombat',
  \ 'mode_map': {'c': 'NORMAL'},
  \ 'active': {
  \   'left': [
  \     ['mode', 'paste'],
  \     ['readonly','gitgutter', 'filename', 'modified'],
  \   ],
  \   'right': [
  \     ['lineinfo'],
  \     ['percent'],
  \     ['charcode', 'fileformat', 'fileencoding', 'filetype'],
  \   ]
  \ },
  \ 'separator': {
  \   'left': '', 'right': ''
  \ },
  \ 'subseparator': {
  \   'left': '|', 'right': '|'
  \ },
  \ 'component_function': {
  \   'modified': 'MyModified',
  \   'readonly': 'MyReadonly',
  \   'fugitive': 'MyFugitive',
  \   'filename': 'MyFilename',
  \   'fileformat': 'MyFileformat',
  \   'filetype': 'MyFiletype',
  \   'fileencoding': 'MyFileencoding',
  \   'mode': 'MyMode',
  \   'gitgutter': 'MyGitGutter',
  \ },
  \ }

let g:lightline.tabline = {
  \ 'left': [
  \   ['tabs']
  \ ],
  \ 'right': [
  \   ['gitgutter', 'fugitive', 'close']
  \ ]
  \ }

function! MyModified()
    if &filetype == "help"
        return ""
    elseif &modified
        return "+"
    elseif &modifiable
        return ""
    else
        return ""
    endif
endfunction

function! MyReadonly()
    if &filetype == "help"
        return ""
    elseif &readonly
        return "RO"
    else
        return ""
    endif
endfunction

function! MyFilename()
  return  (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]')
endfunction

function! MyFugitive()
    return exists('*fugitive#head') ? fugitive#head() : ''
endfunction

function! MyFileformat()
  return winwidth('.') > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
  return winwidth('.') > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth('.') > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  return winwidth('.') > 60 ? lightline#mode() : ''
endfunction

function! MyGitGutter()
  if ! exists('*GitGutterGetHunkSummary')
        \ || ! get(g:, 'gitgutter_enabled', 0)
        \ || winwidth('.') <= 90
    return ''
  endif
  let symbols = [
        \ g:gitgutter_sign_added . ' ',
        \ g:gitgutter_sign_modified . ' ',
        \ g:gitgutter_sign_removed . ' '
        \ ]
  let hunks = GitGutterGetHunkSummary()
  let ret = []
  for i in [0, 1, 2]
    if hunks[i] > 0
      call add(ret, symbols[i] . hunks[i])
    endif
  endfor
  return join(ret, ' ')
endfunction
" }}}
" ------------------------------------------------------------------------------
let g:quickrun_no_default_key_mappings = 1
"QuickRunのキーマップ
nnoremap <silent><F5> :<C-u>QuickRun<CR>
vnoremap <silent><F5> :QuickRun<CR>
" }}}
" ------------------------------------------------------------------------------
" file type 毎設定 {{{
" ------------------------------------------------------------------------------
" -- C/C++
" ------------------------------------------------------------------------------
" common {{{
" ------------------------------------------------------------------------------
" 標準ライブラリへのパスを設定
" ------------------------------------------------------------------------------
" http://d.hatena.ne.jp/osyo-manga/20131219/1387465034
let $CPP_STDLIB = "/usr/include/c++"
augroup vimrc-set_filetype_cpp_stdlib
    autocmd!
    " $CPP_STDLIB よりも下の階層のファイルが開かれて
    " filetype が設定されていない場合に filetype=cpp を設定する
    autocmd BufReadPost $CPP_STDLIB/* if empty(&filetype) | set filetype=cpp | endif
augroup END
" ------------------------------------------------------------------------------
" 名前空間の入力を簡単にする
" ------------------------------------------------------------------------------
" http://rhysd.hatenablog.com/entry/2013/12/10/233201#namespace
augroup cpp-namespace
    autocmd!
    autocmd FileType cpp inoremap <buffer><expr>; <SID>expand_namespace()
augroup END
function! s:expand_namespace()
    let s = getline('.')[0:col('.')-1]
    if s =~# '\<b;$'
        return "\<BS>oost::"
    elseif s =~# '\<s;$'
        return "\<BS>td::"
    elseif s =~# '\<d;$'
        return "\<BS>etail::"
    else
        return ';'
    endif
endfunction
" ------------------------------------------------------------------------------
" }}}
" ------------------------------------------------------------------------------
" 'vim-jp/cpp-vim' {{{
" ------------------------------------------------------------------------------
" }}}
" ------------------------------------------------------------------------------
" 'Rip-Rip/clang_complete' {{{
" ------------------------------------------------------------------------------
set completeopt=menuone
let g:clang_complete_auto = 0
let g:clang_auto_select = 0
let g:clang_complete_copen = 0
let g:clang_hl_errors = 0
let g:clang_snippets = 0
let g:clang_trailing_placeholder = 0
let g:clang_use_library = 1
let g:clang_complete_macros = 0
let g:clang_complete_patterns = 0

" let g:clang_library_path = '/usr/lib/llvm' "fodra32
" let g:clang_library_path = '/usr/lib64/llvm' "fedora64
" let g:clang_library_path = '/usr/lib/llvm-3.5/lib' "Ubuntu64
let g:clang_library_path = '/usr/lib/llvm-3.5/lib' "Ubuntu32

let g:clang_debug = 0
let g:clang_user_options = '-std= c++1y -w'

" }}}
" ------------------------------------------------------------------------------
" == TRIAL == 'bbchung/clighter' {{{
" ------------------------------------------------------------------------------
" }}}
" ------------------------------------------------------------------------------
" -- Go
" ------------------------------------------------------------------------------
" 'fatih/vim-go' {{{
let g:go_highlight_functions = 1
let g:go_highlight_methods   = 1
let g:go_highlight_structs   = 1
" }}}
" ------------------------------------------------------------------------------
" ------------------------------------------------------------------------------
" -- QML
" ------------------------------------------------------------------------------
" 'peterhoeg/vim-qml' {{{
" ------------------------------------------------------------------------------
" }}}
" ------------------------------------------------------------------------------
" -- JSON
" ------------------------------------------------------------------------------
" 'elzr/vim-json' {{{
" }}}
" ------------------------------------------------------------------------------
" -- Open CL (*.cl)
" ------------------------------------------------------------------------------
" 'frasercrmck/opencl.vim' {{{
" ------------------------------------------------------------------------------
" }}}
" ------------------------------------------------------------------------------
" -- Open GL
" ------------------------------------------------------------------------------
" 'beyondmarc/opengl.vim' {{{
" ------------------------------------------------------------------------------
Autocmd BufRead *.c,*.h,*.cpp,*.hpp call MyOpenGLCheck()
function! MyOpenGLCheck()
  if search('^#include <gl.*\.h>','n') > 0 ||
  \  search('^#include <GL.*/gl.*\.h>', 'n') > 0 ||
  \  search('^#include <EGL/egl.h>', 'n') > 0
    NeoBundleSource opengl.vim
  endif
endfunction
" }}}
" ------------------------------------------------------------------------------
" -- Markdown
" ------------------------------------------------------------------------------
" 'kannokanno/previm' {{{
" ------------------------------------------------------------------------------
Autocmd BufRead,BufNewFile *.{md,mkdn} set filetype=markdown
let g:previm_open_cmd = ''
nnoremap [previm] <Nop>
nmap <Space>p [previm]
nnoremap <silent> [previm]o :<C-u>PrevimOpen<CR>
nnoremap <silent> [previm]r :call previm#refresh()<CR>
" }}}
" ------------------------------------------------------------------------------
  " -- CoffeeScript
" ------------------------------------------------------------------------------
" {{{
" vimにcoffeeファイルタイプを認識させる
au BufRead,BufNewFile,BufReadPre *.coffee set filetype=coffee
" インデントを設定
autocmd FileType coffee setlocal sw=2 sts=2 ts=2 et

"------------------------------------
" indent_guides
"------------------------------------
" インデントの深さに色を付ける
let g:indent_guides_start_level=2
let g:indent_guides_auto_colors=0
let g:indent_guides_enable_on_vim_startup=0
let g:indent_guides_color_change_percent=20
let g:indent_guides_guide_size=1
let g:indent_guides_space_guides=1

hi IndentGuidesOdd  ctermbg=235
hi IndentGuidesEven ctermbg=237
au FileType coffee,ruby,javascript,python IndentGuidesEnable
nmap <silent><Leader>ig <Plug>IndentGuidesToggle

" alt-gtags.vim
nnoremap <C-g>j :AltGtags<CR>
nnoremap <C-g>k :AltGtags -r<CR>
nnoremap <C-g>l :AltGtags -s<CR>
