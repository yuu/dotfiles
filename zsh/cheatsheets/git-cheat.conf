git tag -a <tag name> -m 'messge' # タグの作成(-aは注釈付きタグ(推奨))
git branch <branch>         # ブランチを作る
git branch <branch> <起点>  # <起点>からブランチを作る
git checkout <branch>       # <branch>に切り替え
git push origin <branch>    # ローカルのブランチをリモートにpush
git checkout -b <local branch> origin/<remote branch>    # リモートのブランチをとってくる
git checkout -t origin/<remote branch>                   # リモートのブランチをとってくる
git reset HEAD hoge/hoge.c; git checkout hoge/hoge.c     # git rmからの復活
git checkout HEAD -- FILE                                # 同じ名の場合 -- をつける
git reset Dropbox/**/*~     # 末尾が~のファイルのステージングの取り消し(zsh)
git rm --cached <filename>  # ローカルのファイルは消さずに管理から外す
git clean -dfx              # git管理外のファイルはすべて削除
git commit --amend --author="name <address>" # コミッターの変更
git submodule foreach git clean -fdx # submoduleすべてにcleanを投げる
git checkout --orphan doc   # 空ブランチを作成する

# diff コマンド
git diff --stat <commit> <commit>   #リビジョン間のファイルの差分一覧

# リモートブランチの削除(要注意)
git push --delete origin <remote branch>

# GitExtensionのようなログ表示
git log --oneline --graph --decorate --all

# Commiter と Author をすべて変更
NAME="" EM="" git filter-branch -f --env-filter 'GIT_AUTHOR_NAME="${NAME}"; GIT_AUTHOR_EMAIL="${EM}"; GIT_COMMITTER_NAME="${NAME}"; GIT_COMMITTER_EMAIL="${EM}";' HEAD

# 上記ですべて変更した場合のbackupを消す
git update-ref -d refs/original/refs/heads/master

git bisect start bad good
    git bisect run <script>
    git bisect good or bad
git bisect reset
